// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Factory__ExchangeCreated extends ethereum.Event {
  get params(): Factory__ExchangeCreated__Params {
    return new Factory__ExchangeCreated__Params(this);
  }
}

export class Factory__ExchangeCreated__Params {
  _event: Factory__ExchangeCreated;

  constructor(event: Factory__ExchangeCreated) {
    this._event = event;
  }

  get _tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _exchangeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  createExchange(_tokenAddress: Address): Address {
    let result = super.call(
      "createExchange",
      "createExchange(address):(address)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );

    return result[0].toAddress();
  }

  try_createExchange(_tokenAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createExchange",
      "createExchange(address):(address)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExchange(_tokenAddress: Address): Address {
    let result = super.call("getExchange", "getExchange(address):(address)", [
      ethereum.Value.fromAddress(_tokenAddress)
    ]);

    return result[0].toAddress();
  }

  try_getExchange(_tokenAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getExchange",
      "getExchange(address):(address)",
      [ethereum.Value.fromAddress(_tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenToExchange(tokenAddress: Address): Address {
    let result = super.call(
      "tokenToExchange",
      "tokenToExchange(address):(address)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toAddress();
  }

  try_tokenToExchange(tokenAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenToExchange",
      "tokenToExchange(address):(address)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateExchangeCall extends ethereum.Call {
  get inputs(): CreateExchangeCall__Inputs {
    return new CreateExchangeCall__Inputs(this);
  }

  get outputs(): CreateExchangeCall__Outputs {
    return new CreateExchangeCall__Outputs(this);
  }
}

export class CreateExchangeCall__Inputs {
  _call: CreateExchangeCall;

  constructor(call: CreateExchangeCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateExchangeCall__Outputs {
  _call: CreateExchangeCall;

  constructor(call: CreateExchangeCall) {
    this._call = call;
  }

  get exchangeAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
